

#include <Arduino.h>
#include <stdio.h>
//#include <memory>

#include "DisplayRow.h"
#include "Pin.h"
#include "SagarDisplayControlFileReader.h"
#include "DisplayOutputPinFactory.h"

// Include data file generated by webtool that defines the pixel states
#include "PIXELS.h"


#include "SagarDisplay.h"

#define WIDTH 6
#define PIN_COUNT (2*WIDTH)

#if defined(ARDUINO)
	#define ADOP_HIGH HIGH
	#define ADOP_LOW LOW
#else
	#define ADOP_HIGH 1
	#define ADOP_LOW 0
#endif

unsigned char pixels[] = PIXELS;

SDCReader *SagarDisplay::data = NULL;
typedef DisplayOutputPin *DisplayOutputPinPtr;

DisplayOutputPinPtr *SagarDisplay::pixelPins;

bool SagarDisplay::displayOK = false;
int SagarDisplay::row;
Pin *SagarDisplay::clockPin;

const unsigned long SagarDisplay::clockDurationHighMicros =  100UL;
const unsigned long SagarDisplay::clockDurationLowMicros  = 1900UL;
const int SagarDisplay::resetDurationMillis = 2500;

unsigned long nextTransitionTime;
unsigned long lastTransitionTime;
Pin::State clockState;
bool SagarDisplay::setup(){
	data = SDCReader::loadBytes(pixels);

	if (NULL == data) return false;

	if (data->getWidth() < WIDTH) {
		// error
		return false;
	}
	pixelPins = new DisplayOutputPinPtr[PIN_COUNT];
	int idx=0;

	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(0), 0x01, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 11);
	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(0), 0x02, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 10);

	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(1), 0x01, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 9);
	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(1), 0x02, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 8);

	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(2), 0x01, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 7);
	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(2), 0x02, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 6);

	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(3), 0x01, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 5);
	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(3), 0x02, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 4);

	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(4), 0x01, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 3);
	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(4), 0x02, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 2);

	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(5), 0x01, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 1);
	pixelPins[idx++] = DisplayOutputPinFactory::getInstance(data->get(5), 0x02, 2, data->getHeight(), ADOP_LOW, ADOP_HIGH, 0);

	row = 0;


	for (
		int it = 0;
		PIN_COUNT != it;
		++it)
	{
		(pixelPins[it])->set(Pin::low);
	}

	clockPin = Pin::get(12);
	clockPin->setup(Pin::output);

        // Clock needs a 1second high pulse to trigger a reset
	clockState = Pin::high;
	clockPin->digitalWrite(clockState);
	delay(SagarDisplay::resetDurationMillis);
        // Clock needs a short delay to recover from the reset
	clockPin->digitalWrite(Pin::low);
	delay(100);


	lastTransitionTime = micros();
	nextTransitionTime = lastTransitionTime + SagarDisplay::clockDurationHighMicros;

	displayOK = true;
	return displayOK;
}

void SagarDisplay::loop(){
	if (!displayOK) return;
	unsigned long now = micros();

	bool transition = false;
	if (nextTransitionTime >= lastTransitionTime) {
		if ( (now > nextTransitionTime) || (now < lastTransitionTime) ) {
			transition = true;
		}
	}
	else {
		if ( (now < lastTransitionTime) && (now >= nextTransitionTime) ) {
			transition = true;
		}
	}

	if (!transition) return;

	if (Pin::low == clockState) {
		for (
			int it = 0;
			PIN_COUNT != it;
			++it)
		{
			(pixelPins[it])->set(Pin::low);
		}

		clockState = Pin::high;
		clockPin->digitalWrite(clockState);
		lastTransitionTime = now;
		nextTransitionTime = now + SagarDisplay::clockDurationHighMicros;

		++row;
		int reset = 0;
		if (data->getHeight() == row){
			row = 0;
			reset = 1;
		}

		for (
			int it = 0;
			PIN_COUNT != it;
			++it)
		{
			if (reset){
				(pixelPins[it])->resetPosition();
			}
			else {
				(pixelPins[it])->incPosition();
			}
		}

	}
	else {
		clockState = Pin::low;
		clockPin->digitalWrite(clockState);
		lastTransitionTime = now;
		nextTransitionTime = now + SagarDisplay::clockDurationLowMicros;

                for (
                    int it = 0;
                    PIN_COUNT != it;
                    ++it)
                {
                    (pixelPins[it])->evaluate();
                }
	}
}
